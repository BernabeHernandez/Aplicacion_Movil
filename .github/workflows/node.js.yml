# .github/workflows/node.js.yml
name: CI/CD Pipeline - React Native + Expo

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      # ========================================
      # ETAPA 1: CHECKOUT DEL CÓDIGO
      # ========================================
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # ========================================
      # ETAPA 2: SETUP DE NODE.JS
      # ========================================
      - name: ⚙️ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      # ========================================
      # ETAPA 3: INSTALACIÓN DE DEPENDENCIAS
      # ========================================
      - name: 📦 Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci
          echo "✅ Dependencies installed successfully"
      
      # ========================================
      # ETAPA 4: VERIFICACIÓN DE CÓDIGO (LINT)
      # ========================================
      - name: 🔍 Check code formatting
        run: |
          echo "Checking code quality..."
          npm run lint --if-present || echo "⚠️ Lint not configured, skipping..."
        continue-on-error: true
      
      # ========================================
      # ETAPA 5: EJECUCIÓN DE PRUEBAS UNITARIAS
      # ========================================
      - name: 🧪 Run unit tests
        run: |
          echo "Running unit tests with coverage..."
          npm test -- --coverage --watchAll=false --verbose
          echo "✅ Tests completed"
      
      # ========================================
      # ETAPA 6: GENERACIÓN DE REPORTES
      # ========================================
      - name: 📊 Upload coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-report-${{ matrix.node-version }}
          path: coverage/
          retention-days: 30
      
      - name: 📋 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            junit.xml
          retention-days: 30
      
      # ========================================
      # ETAPA 7: VERIFICACIÓN DE COBERTURA
      # ========================================
      - name: 📈 Check coverage threshold
        run: |
          echo "Checking coverage thresholds..."
          npm test -- --coverage --coverageReporters=text-summary --watchAll=false
      
      # ========================================
      # ETAPA 8: BUILD DEL PROYECTO
      # ========================================
      - name: 🏗️ Build project
        run: |
          echo "Building project..."
          npm run build --if-present || echo "⚠️ Build not configured for React Native/Expo"
        continue-on-error: true
      
      # ========================================
      # ETAPA 9: COMENTAR RESULTADOS EN PR
      # ========================================
      - name: 💬 Comment test results on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let coverageData = 'Coverage data not available';
            
            try {
              // Leer el resumen de cobertura si existe
              if (fs.existsSync('coverage/coverage-summary.json')) {
                const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
                const total = coverage.total;
                coverageData = `
            📊 **Coverage Summary**
            - Lines: ${total.lines.pct}%
            - Statements: ${total.statements.pct}%
            - Functions: ${total.functions.pct}%
            - Branches: ${total.branches.pct}%
                `;
              }
            } catch (error) {
              console.log('Error reading coverage:', error);
            }
            
            const body = `
            ## 🚀 CI/CD Pipeline Results
            
            ✅ **Tests passed successfully!**
            
            ${coverageData}
            
            ### 📦 Build Information
            - Node.js Version: ${{ matrix.node-version }}
            - Commit: ${context.sha.substring(0, 7)}
            - Branch: ${context.ref.replace('refs/heads/', '')}
            
            ---
            *Automated by GitHub Actions*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
      
      # ========================================
      # ETAPA 10: SUMMARY DEL WORKFLOW
      # ========================================
      - name: 📝 Generate workflow summary
        if: always()
        run: |
          echo "## 🎯 Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Checkout repository" >> $GITHUB_STEP_SUMMARY
          echo "- Setup Node.js ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Install dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- Run unit tests with coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Upload coverage reports" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "Check the artifacts for detailed coverage reports" >> $GITHUB_STEP_SUMMARY